#include <array>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <string>

std::queue</* 수정 필요*/> deck;
std::array<std::array<char, 5>, 52> card = {
    "1광", "1띠", "1피", "1피", "2멍", "2띠", "2피", "2피",
    "3광", "3띠", "3피", "3피", "4멍", "4띠", "4피", "4피",
    "5멍", "5띠", "5피", "5피", "6멍", "6띠", "6피", "6피", 
    "7멍", "7띠", "7피", "7피", "8광", "8멍", "8피", "8피",
    "9쌍", "9띠", "9피", "9피", "P멍", "P띠", "P피", "P피",
    "D광", "D피", "D피", "D쌍", "B광", "B멍", "B띠", "B쌍", 
    "J쌍", "J쌍", "J쌍"};

class Deck {  // deck : Queue, Card : Array
 public:
  // 생성자에 대한 생각 필요
  void shuffle() {  // 무작위 숫자를 뽑아 그 값을 index로 하는 배열의 원소를
                    // 큐로 보내준다.
    srand((unsigned int)time(NULL));
    int i, n;
    for (i = 0; i < number_of_card_; i++) {
      do {
        n = rand() % number_of_card_;  // 랜덤한 숫자 생성
      } while (card[n] != "NULL");
      deck.push(card[n]);  // queue에 배열에 있는 원소를 넣어준다.
      card[n] = "NULL";  // 인덱스 n에 해당하는 배열의 값을 "NULL"로 바꾼다.
    }
  }

  void devide(std::string arr[], int number) {  // 함수를 실행할 때 누구에게, 몇 장을 줄것인지 입력받는다.
    // 맨 처음 실행할 때 사용하는 메소드로,
    // 바닥에 3장, 플레이어에게 4장, 바닥에 3장, 플레이어에게 3장 순서로 나눠준다.
    for (int i = 0; i < number; i++) {
      std::string element = deck.front();
      deck.pop();
      arr[(arr->length()+1)] = element;
    }
  }

  void draw(std::string arr[]) {  // 카드를 뽑는 메소드
    // 손 패에서 조커를 내는 경우 1장을 뽑아 손 패에 가져온다.
    // 1장을 내고, 뒤집었는데 조커가 나온 경우 1장을 더 뒤집는다.
    
    std::string element = deck.front();
    deck.pop();
    arr[(arr->length() + 1)] = element;
  }

 private:
  const int number_of_card_ = 51;  // 총 카드의 개수. 변수 위치를 이동해야할 것 같음.
};


