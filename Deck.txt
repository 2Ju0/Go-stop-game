#include <array>
#include <cstdlib>
#include <ctime>
#include <queue>
#include <string>
#include <vector>
#include <iostream>
#include <stdlib.h>
#include <list>

class Hwatoo {
 public:
  Hwatoo(std::string name) : name_(name) {}

  int getMonth() const {
    char temp = name_.at(0);
    if (isdigit(temp)) {
      return temp - '0';
    } else if (temp == 'P') {
      return 10;
    } else if (temp == 'D') {
      return 11;
    } else if (temp == 'B') {
      return 12;
    } else {
      return 13;
    }
  }

  std::string getKind() const {
    std::vector<char> charArray(name_.begin(), name_.end());
    charArray.push_back('\0');
    char* charArrayPtr = &charArray[0];
    char* temp = charArrayPtr + 1;
    if (strcmp(temp, "피") == 0) {
      return "피";
    } else if (strcmp(temp, "광") == 0) {
      return "광";
    } else if (strcmp(temp, "멍") == 0) {
      return "멍";
    } else if (strcmp(temp, "띠") == 0) {
      return "띠";
    } else if (strcmp(temp, "쌍") == 0) {
      return "쌍";
    } else {
      return "jocker";
    }
  }

  //void getName() { std::cout << name_; }

 private:
  std::string name_;
};


Hwatoo getArray() {
  // 카드 들을 배열에 넣은 상태 예시 
  Hwatoo arr[4] = {Hwatoo("1광"), Hwatoo("1띠"), Hwatoo("1피"), Hwatoo("1피")};
  return arr;
}

std::queue<Hwatoo> deck;

class Deck {  // deck : Queue, Card : Array
 public:
  // 생성자에 대한 생각 필요
  void shuffle(Hwatoo *arr) {  // 무작위 숫자를 뽑아 그 값을 index로 하는 배열의 원소를
                    // 큐로 보내준다.
    srand((unsigned int)time(NULL));
    int i, n;
    for (i = 0; i < number_of_card_; i++) {
      do {
        n = rand() % number_of_card_;  // 랜덤한 숫자 생성
      } while (arr[n] != NULL);
      deck.push(arr[n]);  // queue에 배열에 있는 원소를 넣어준다.
      arr[n] = nullptr;  // 인덱스 n에 해당하는 배열의 값을 "NULL"로 바꾼다.
    }
  }

  void devide(std::list<Hwatoo> lst, int num) {  
    // 함수를 실행할 때 누구에게, 몇 장을 줄것인지 입력받는다.
    // 맨 처음 실행할 때 사용하는 메소드로,
    // 바닥에 3장, 플레이어에게 4장, 바닥에 3장, 플레이어에게 3장 순서로 나눠준다.
    for (int i = 0; i < num; i++) {
      Hwatoo element = deck.front();
      deck.pop();
      lst.push_back(element);
    }
  }

  void draw(std::list<Hwatoo> lst) {  // 카드를 뽑는 메소드
    // 손 패에서 조커를 내는 경우 1장을 뽑아 손 패에 가져온다.
    // 1장을 내고, 뒤집었는데 조커가 나온 경우 1장을 더 뒤집는다.
    
    Hwatoo element = deck.front();
    deck.pop();
    lst.push_back(element);
  }

 private:
  const int number_of_card_ = 51;  // 총 카드의 개수. 변수 위치를 이동해야할 것 같음.
};


